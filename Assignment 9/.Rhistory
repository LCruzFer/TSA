install.packages("tidyr")
for (i in seq_along(d_list))
{}
d_list = c(0, 1, 2, 3, 4)
for (i in seq_along(d_list)){}
for (i in seq_along(d_list)){}
for (i in seq_along(d_list)){
print(i)
}
rm(list=ls())
library(ggplot2)
library(tidyr)
library(dict)
############################################
# Defining all functions I need later
############################################
# Function for shifting the variables back - i.e. get e_{t-1} from e_t
f <- function(x, z){
value <- x**(z-1)*exp(-x)
return(value)
}
intf <- function(z){
if (z != 0){
value <- integrate(f, lower=0,upper=Inf, z=z)$value
}else{
value <- integrate(f, lower=1e-3,upper=Inf, z=z)$value
}
return(value)
}
psi <- function(j, d){
if (d<0){
upper <- j**(-d-1)
lower <- intf(abs(d))
}else{
upper <- j**(d-1)
lower <- intf(d)
}
value <- upper/lower
return(value)
}
get_data <- function(overall_length, d_list){
y <- matrix(nrow=overall_length, ncol=length(d_list))
for (i in seq_along(d_list)){
res <- rep(NA, length(overall_length))
for (t in seq_len(overall_length)){
val <- 0
for (j in seq_len(t-1)){
tmp <- psi(j,d_list[i]) * et[t-j]
val <- val + tmp
}
res[t] <- sum(val)
print(t)
}
y[,i] <- res
}
return(y)
}
get_gamma0 <- function(data, d_list, d){
pos <- which(d_list==d)
sigma2 <- var(data[,pos])
upper <- intf(1-2*d)
lower <- intf(1-d)**2
final <- sigma2*(upper/lower)
return(final)
}
get_corrs <- function(data, laglength, d_list){
sto = dict()
for (i in seq_along(d_list)){
lagframe <- data.frame()
gamma0 <- get_gamma0(data, d_list, d_list[i])
lagframe <- cbind(0, gamma0)
for (h in seq(laglength)){
pre <- (h-1+d_list[i])/(h-d_list[i])
gammah <- pre * lagframe[h,2]
lagframe <- rbind(lagframe, cbind(h, gammah))
}
lagframe[,2] <- lagframe[,2]/lagframe[1,2]
colnames(lagframe) <- c("h", 'real')
estimated <- acf(data[,i], lag.max=laglength,
plot=FALSE, demean = FALSE)$acf
final <- cbind(lagframe, estimated)
sto[[toString(i)]] <- data.frame(final)
}
return(sto)
}
prepplot <- function(data){
df_plot <- pivot_longer(data, -h, names_to = 'type', values_to = 'values')
return(df_plot)
}
############################################
############################################
############################################
M <- 2000
TS <- 1000
overall_length <- 500
et <- rnorm(M+TS)
d_list <- c(-0.45, -0.25, 0, 0.25, 0.45)
y <- get_data(overall_length, d_list)
# Dictionary with 5 dataframes for each d
a <- get_corrs(y, 25, d_list)
# Test with correlations for last d
b <- a[["5"]]
for (key in a$keys()){
df <- prepplot(a[[key]])
p <- ggplot(data=df, aes(x=h, y=value, hue=type))
}
rm(list=ls())
library(ggplot2)
library(tidyr)
library(dict)
############################################
# Defining all functions I need later
############################################
# Function for shifting the variables back - i.e. get e_{t-1} from e_t
f <- function(x, z){
value <- x**(z-1)*exp(-x)
return(value)
}
intf <- function(z){
if (z != 0){
value <- integrate(f, lower=0,upper=Inf, z=z)$value
}else{
value <- integrate(f, lower=1e-3,upper=Inf, z=z)$value
}
return(value)
}
psi <- function(j, d){
if (d<0){
upper <- j**(-d-1)
lower <- intf(abs(d))
}else{
upper <- j**(d-1)
lower <- intf(d)
}
value <- upper/lower
return(value)
}
get_data <- function(overall_length, d_list){
y <- matrix(nrow=overall_length, ncol=length(d_list))
for (i in seq_along(d_list)){
res <- rep(NA, length(overall_length))
for (t in seq_len(overall_length)){
val <- 0
for (j in seq_len(t-1)){
tmp <- psi(j,d_list[i]) * et[t-j]
val <- val + tmp
}
res[t] <- sum(val)
print(t)
}
y[,i] <- res
}
return(y)
}
get_gamma0 <- function(data, d_list, d){
pos <- which(d_list==d)
sigma2 <- var(data[,pos])
upper <- intf(1-2*d)
lower <- intf(1-d)**2
final <- sigma2*(upper/lower)
return(final)
}
get_corrs <- function(data, laglength, d_list){
sto = dict()
for (i in seq_along(d_list)){
lagframe <- data.frame()
gamma0 <- get_gamma0(data, d_list, d_list[i])
lagframe <- cbind(0, gamma0)
for (h in seq(laglength)){
pre <- (h-1+d_list[i])/(h-d_list[i])
gammah <- pre * lagframe[h,2]
lagframe <- rbind(lagframe, cbind(h, gammah))
}
lagframe[,2] <- lagframe[,2]/lagframe[1,2]
colnames(lagframe) <- c("h", 'real')
estimated <- acf(data[,i], lag.max=laglength,
plot=FALSE, demean = FALSE)$acf
final <- cbind(lagframe, estimated)
sto[[toString(i)]] <- data.frame(final)
}
return(sto)
}
prepplot <- function(data){
df_plot <- pivot_longer(data, -h, names_to = 'type', values_to = 'values')
return(df_plot)
}
############################################
############################################
############################################
M <- 2000
TS <- 1000
overall_length <- 500
et <- rnorm(M+TS)
d_list <- c(-0.45, -0.25, 0, 0.25, 0.45)
y <- get_data(overall_length, d_list)
rm(list=ls())
library(ggplot2)
library(tidyr)
library(dict)
############################################
# Defining all functions I need later
############################################
# Function for shifting the variables back - i.e. get e_{t-1} from e_t
f <- function(x, z){
value <- x**(z-1)*exp(-x)
return(value)
}
intf <- function(z){
if (z != 0){
value <- integrate(f, lower=0,upper=Inf, z=z)$value
}else{
value <- integrate(f, lower=1e-3,upper=Inf, z=z)$value
}
return(value)
}
psi <- function(j, d){
if (d<0){
upper <- j**(-d-1)
lower <- intf(abs(d))
}else{
upper <- j**(d-1)
lower <- intf(d)
}
value <- upper/lower
return(value)
}
get_data <- function(overall_length, d_list){
y <- matrix(nrow=overall_length, ncol=length(d_list))
for (i in seq_along(d_list)){
res <- rep(NA, length(overall_length))
for (t in seq_len(overall_length)){
val <- 0
for (j in seq_len(t-1)){
tmp <- psi(j,d_list[i]) * et[t-j]
val <- val + tmp
}
res[t] <- sum(val)
print(t)
}
y[,i] <- res
}
return(y)
}
get_gamma0 <- function(data, d_list, d){
pos <- which(d_list==d)
sigma2 <- var(data[,pos])
upper <- intf(1-2*d)
lower <- intf(1-d)**2
final <- sigma2*(upper/lower)
return(final)
}
get_corrs <- function(data, laglength, d_list){
sto = dict()
for (i in seq_along(d_list)){
lagframe <- data.frame()
gamma0 <- get_gamma0(data, d_list, d_list[i])
lagframe <- cbind(0, gamma0)
for (h in seq(laglength)){
pre <- (h-1+d_list[i])/(h-d_list[i])
gammah <- pre * lagframe[h,2]
lagframe <- rbind(lagframe, cbind(h, gammah))
}
lagframe[,2] <- lagframe[,2]/lagframe[1,2]
colnames(lagframe) <- c("h", 'real')
estimated <- acf(data[,i], lag.max=laglength,
plot=FALSE, demean = FALSE)$acf
final <- cbind(lagframe, estimated)
sto[[toString(i)]] <- data.frame(final)
}
return(sto)
}
prepplot <- function(data){
df_plot <- pivot_longer(data, -h, names_to = 'type', values_to = 'values')
return(df_plot)
}
############################################
############################################
############################################
M <- 200
TS <- 100
overall_length <- 50
et <- rnorm(M+TS)
d_list <- c(-0.45, -0.25, 0, 0.25, 0.45)
y <- get_data(overall_length, d_list)
y
# Dictionary with 5 dataframes for each d
a <- get_corrs(y, 25, d_list)
library(dict)
install.packages('dict')
